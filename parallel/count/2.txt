How do modern static type systems deal with imperfect knowledge? For instance, do they require that you declare the type of all values before you can use them? Can you change your mind about the type of a value? Can you disagree with (and override) the type of a value passed to you from someone else's code? I agree that being able to automatically validate my use of values could be useful at times. But this should be optional.
I've found myself at odds with assumptions made in third party code on several occassions. If these assumptions are embedded into a type system which the compiler forces me to conform to, it becomes more of a hindrance than a help. But I admit, these experiences have mostly been with Java, so I have incomplete knowledge on the workings of modern type systems. So, how do modern type systems address these concerns?